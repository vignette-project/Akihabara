root = true

[*]
indent_style = space
end_of_line = crlf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.{csproj,targets,props}]
indent_size = 2

[*.axaml.cs]
generated_code = true

[*.cs]
file_header_template = Copyright (c) homuer & The Vignette Authors. Licensed under the MIT license.\nSee the LICENSE file in the repository root for more details.

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#csharp_indent_case_contents_when_block
csharp_indent_case_contents_when_block = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place else statements on a new line
csharp_new_line_before_else = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for object_collection_array_initializers, control_blocks, types, and methods (also known as "Allman" style)
csharp_new_line_before_open_brace = object_collection_array_initializers, control_blocks, types, methods

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true

#Style - Code block preferences

#prefer no curly braces if allowed
csharp_prefer_braces = false:suggestion

#Style - expression bodied member options

#prefer expression-bodied members for accessors
csharp_style_expression_bodied_accessors = true:suggestion
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer expression-bodied members for indexers
csharp_style_expression_bodied_indexers = true:suggestion
#prefer expression-bodied members for methods
csharp_style_expression_bodied_methods = true:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion
#prefer ItemX properties to tuple names
dotnet_style_explicit_tuple_names = false:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer default over default(T)
csharp_prefer_simple_default_expression = true:suggestion
#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion

#Style - implicit and explicit types

#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:suggestion
#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,internal,protected,static,extern,readonly,override,abstract,unsafe,virtual:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion

# Naming Rules

# General Naming
#   - private struct ExampleStruct
dotnet_naming_symbols.general_symbols.applicable_kinds = class,struct,enum,delegate
dotnet_naming_symbols.general_symbols.applicable_accessibilities = *

dotnet_naming_style.general_style.capitalization = pascal_case

dotnet_naming_rule.general.symbols = general_symbols
dotnet_naming_rule.general.style = general_style
dotnet_naming_rule.general.severity = warning

# Public Members
#   - public bool ExampleMember
dotnet_naming_symbols.public_symbols.applicable_kinds = property,method,field,event
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public,internal,protected,protected_internal

dotnet_naming_style.public_style.capitalization = pascal_case

dotnet_naming_rule.public.symbols = public_symbols
dotnet_naming_rule.public.style = public_style
dotnet_naming_rule.public.severity = warning

# Private Members
#   - private readonly int exampleMember
dotnet_naming_symbols.private_symbols.applicable_kinds = property,method,field,event
dotnet_naming_symbols.private_symbols.applicable_accessibilities = private,private_protected,local

dotnet_naming_style.private_style.capitalization = camel_case

dotnet_naming_rule.private.symbols = private_symbols
dotnet_naming_rule.private.style = private_style
dotnet_naming_rule.private.severity = warning

# Interfaces
#   - public interface IExampleInterface
dotnet_naming_symbols.interface_symbol.applicable_kinds = interface
dotnet_naming_symbols.interface_symbol.applicable_accessibilities = public,internal,protected,protected_internal

dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

dotnet_naming_rule.interface.symbols = interface_symbol
dotnet_naming_rule.interface.style = interface_style
dotnet_naming_rule.interface.severity = warning

# Public Constant/Static Members
#   - public const EXAMPLE_MEMBER
dotnet_naming_symbols.public_const_symbols.applicable_kinds = class,struct,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_const_symbols.applicable_accessibilities = public,internal,protected,protected_internal
dotnet_naming_symbols.public_const_symbols.required_modifiers = const,static

dotnet_naming_style.public_const_style.capitalization = all_upper
dotnet_naming_style.public_const_style.word_separator = _

dotnet_naming_rule.public_const.symbols = public_const_symbols
dotnet_naming_rule.public_const.style = public_const_style
dotnet_naming_rule.public_const.severity = warning

# Private Constant/Static Members
#   - private static example_member
dotnet_naming_symbols.public_const_symbols.applicable_kinds = class,struct,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_const_symbols.applicable_accessibilities = private,private_protected,local
dotnet_naming_symbols.public_const_symbols.required_modifiers = const,static

dotnet_naming_style.public_const_style.capitalization = all_lower
dotnet_naming_style.public_const_style.word_separator = _

dotnet_naming_rule.public_const.symbols = public_const_symbols
dotnet_naming_rule.public_const.style = public_const_style
dotnet_naming_rule.public_const.severity = warning

dotnet_diagnostic.IDE1006.severity = warning
